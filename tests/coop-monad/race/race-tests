008: `(a <|> b) >> (b <|> a)` when, say, `a` is faster than `b`
009: `infinite <|> a`
010: `(zipWith f a b) <|> c`
011: `zipWith f (a <|> b) (c <|> d)`
012: `a <|> b <|> c` when `a` is the shortest and when `c` is the shortest
012: `(a <|> b) <|> c` being equal to `a <|> b <|> c`, i.e. associativity
013: `((a <|> b) >>= e) <|> (c <|> d)`

when `Alternative` is available:
014: `empty <|> a` and `a <|> empty`
015: `choice` of some list
016: choice of choices
017: `(b *> empty) <|> a` with effects of `b` which are before the end of `a`
018: `(empty *> b) <|> a` without any effects of `b`
019: `a *> empty *> b` being eqivalent to `a` by side effects (not by the returned result)
020: `zipWith f empty a` is equivalent to `a *> empty`
021: `zipWith f (a *> empty) b` is equivalent to `zipWith (,) a b *> empty`

-- finalisation action in the underlying monad?
-- atomic sequence of actions? or the current `lift` is enough?
